name: Deploy to Production
run-name: Deploy to Production by @${{ github.actor }}
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  check-model-cache-exists:
    runs-on: ubuntu-latest
    outputs:
      model_cache_exists: ${{ steps.model_cache_exists.outputs.model_cache_exists }}
      model_cache_key: ${{ steps.model_cache_exists.outputs.model_cache_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Check Model Cache Exists
        id: check_model_cache_exists
        uses: actions/cache@v3
        with:
          path: models
          key: ${{ runner.os }}-models-${{ hashFiles('**/models/**') }}
      - name: Output Model Cache Exists
        id: model_cache_exists
        run: |
          if [ "${{ steps.check_model_cache_exists.outputs.cache-hit }}" == "true" ]; then
            echo "MODEL_CACHE_EXISTS=true" >> $GITHUB_OUTPUT
            echo "MODEL_CACHE_KEY=$(echo ${{ runner.os }}-models-${{ hashFiles('**/models/**') }})" >> $GITHUB_OUTPUT
          else
            echo "MODEL_CACHE_EXISTS=false" >> $GITHUB_OUTPUT
            echo "MODEL_CACHE_KEY=null" >> $GITHUB_OUTPUT
          fi
  create-model:
    needs: [check-model-cache-exists]
    runs-on: ubuntu-latest
    if: ${{ needs.check-model-cache-exists.outputs.model_cache_exists }} == 'false'
    outputs:
      model_cache_key: ${{ steps.model_cache_key.outputs.model_cache_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.13
      - name: Setup dependencies
        run: |
          cd artifacts/sentence_bert_onnx_transform
          pip install -r requirements.txt
      - name: Create Onnx Model Through Script
        run: |
          cd artifacts/sentence_bert_onnx_transform
          python src/sentence_bert_onnx_transform.py \
            --model_name sentence-transformers/all-MiniLM-L6-v2 \
            --output_model_path ../../models/all_minilm_l6_v2.onnx \
            --output_tokenizer_path ../../models/all_minilm_l6_v2.tokenizer \
            --onnx-opset-version 13
      - name: Create Model Cache
        uses: actions/cache@v3
        with:
          path: models
          key: ${{ runner.os }}-models-${{ hashFiles('**/models/**') }}
      - name: Output Model Cache Key
        id: model_cache_key
        run: |
          echo "MODEL_CACHE_KEY=$(echo ${{ runner.os }}-models-${{ hashFiles('**/models/**') }})" >> $GITHUB_OUTPUT
  terraform-plan:
    needs: [create-model]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.1
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan
        env:
          TF_VAR_allowed_cidrs_string: ${{ secrets.allowed_cidrs }}
          TF_VAR_ssh_public_key: ${{ secrets.bastion_ssh_public_key }}
        continue-on-error: true
  terraform-apply-main:
    if: github.ref == 'refs/heads/main'
    needs: [terraform-plan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.1
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          TF_VAR_allowed_cidrs_string: ${{ secrets.allowed_cidrs }}
          TF_VAR_ssh_public_key: ${{ secrets.bastion_ssh_public_key }}
  terraform-apply-dev:
    if: github.ref != 'refs/heads/main'
    needs: [terraform-plan]
    environment:
      name: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.1
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          TF_VAR_allowed_cidrs_string: ${{ secrets.allowed_cidrs }}
          TF_VAR_ssh_public_key: ${{ secrets.bastion_ssh_public_key }}
  # ci_preparation:
  #   needs: [terraform-apply-main, terraform-apply-dev, create-model]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
  #         role-session-name: ${{ github.actor }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Retrieve Model Cache Key
  #       uses: actions/cache@v3
  #       with:
  #         path: models
  #         key: ${{ needs.create-model.outputs.model_cache_key }}
  #     - name: Push Model to S3
  #       run: |
  #         aws s3 cp models/ s3://alexau-pyconhk2023-models/ --recursive
  #     - name: Push Data to S3
  #       run: |
  #         aws s3 cp data/ s3://alexau-pyconhk2023-data/ --recursive
