name: Deploy to Production
run-name: Deploy to Production by @${{ github.actor }}
on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
env:
  MODEL_NAME: sentence-transformers/all-MiniLM-L6-v2
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout
jobs:
  check-model-cache-exists:
    runs-on: ubuntu-latest
    outputs:
      model_cache_exists: ${{ steps.model_cache_exists.outputs.model_cache_exists }}
      model_cache_key: ${{ steps.model_cache_exists.outputs.model_cache_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check Model Cache Exists
        id: check_model_cache_exists
        uses: actions/cache@v3
        with:
          path: models
          key: ${{ runner.os }}-models-${{ env.MODEL_NAME }}-${{ hashFiles('**/models/**') }}
      - name: Output Model Cache Exists
        id: model_cache_exists
        if: steps.check_model_cache_exists.outputs.cache-hit == 'true'
        run: |
          echo "MODEL_CACHE_EXISTS=true" >> $GITHUB_OUTPUT
          echo "MODEL_CACHE_KEY=$(echo ${{ runner.os }}-models-${{ env.MODEL_NAME }}-${{ hashFiles('**/models/**') }})" >> $GITHUB_OUTPUT
  create-model:
    needs: [check-model-cache-exists]
    runs-on: ubuntu-latest
    if: needs.check-model-cache-exists.outputs.model_cache_exists != 'true'
    outputs:
      model_cache_key: ${{ steps.model_cache_key.outputs.model_cache_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.13
      - name: Setup dependencies
        run: |
          cd artifacts/sentence_bert_onnx_transform
          pip install -r requirements.txt
      - name: Create Onnx Model Through Script
        run: |
          cd artifacts/sentence_bert_onnx_transform
          python src/sentence_bert_onnx_transform.py \
            --model_name ${{ env.MODEL_NAME }} \
            --output_model_path ../../models/${{ env.MODEL_NAME }}.onnx \
            --output_tokenizer_path ../../models/${{ env.MODEL_NAME }}.tokenizer \
            --onnx-opset-version 13
      - name: Create Model Cache
        uses: actions/cache@v3
        with:
          path: models
          key: ${{ runner.os }}-models-${{ env.MODEL_NAME }}-${{ hashFiles('**/models/**') }}
      - name: Output Model Cache Key
        id: model_cache_key
        run: |
          echo "MODEL_CACHE_KEY=$(echo ${{ runner.os }}-models-${{ env.MODEL_NAME }}-${{ hashFiles('**/models/**') }})" >> $GITHUB_OUTPUT
  build-push-embedding-handler-image:
    needs: [create-model, check-model-cache-exists]
    if: |
      always() &&
      needs.check-model-cache-exists.result == 'success' &&
      (needs.create-model.result == 'success' || needs.create-model.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create Model Cache From Check
        id: read-cache-check
        if: needs.check-model-cache-exists.outputs.model_cache_exists == 'true'
        uses: actions/cache@v3
        with:
          path: models
          key: ${{ needs.check-model-cache-exists.outputs.model_cache_key }}
      - name: Create Model Cache From Create
        id: read-cache-create
        if: needs.create-model.outputs.model_cache_key != ''
        uses: actions/cache@v3
        with:
          path: models
          key: ${{ needs.create-model.outputs.model_cache_key }}
      - name: Check Model Cache Directory
        run: |
          ls -al models
          cd models
          pwd
      - name: Build Dockerfile
        id: build
        run: |
          cd backend/data_embedding_handler
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          export AWS_ECR_REPOSITORY_URL=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_REPOSITORY_URL}
          docker build -t "${AWS_ECR_REPOSITORY_URL}:$(git rev-parse --short HEAD)" \
            --build-arg MODEL_PATH=../../models/${{ env.MODEL_NAME }}.onnx \
            --build-arg TOKENIZER_PATH=../../models/${{ env.MODEL_NAME }}.tokenizer \
            .
          docker push "${AWS_ECR_REPOSITORY_URL}:$(git rev-parse --short HEAD)"
  terraform-plan:
    needs:
      [
        create-model,
        check-model-cache-exists,
        build-push-embedding-handler-image,
      ]
    if: |
      always() &&
      needs.check-model-cache-exists.result == 'success' &&
      needs.build-push-embedding-handler-image.result == 'success' &&
      (needs.create-model.result == 'success' || needs.create-model.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.1
      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init
      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan
        env:
          TF_VAR_allowed_cidrs_string: ${{ secrets.allowed_cidrs }}
          TF_VAR_ssh_public_key: ${{ secrets.bastion_ssh_public_key }}
  terraform-apply-main:
    needs: [terraform-plan, create-model]
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      needs.terraform-plan.result == 'success' &&
      (needs.create-model.result == 'success' || needs.create-model.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.1
      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init
      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          TF_VAR_allowed_cidrs_string: ${{ secrets.allowed_cidrs }}
          TF_VAR_ssh_public_key: ${{ secrets.bastion_ssh_public_key }}
  terraform-apply-dev:
    needs: [terraform-plan, create-model]
    if: |
      always() &&
      github.ref != 'refs/heads/main' &&
      needs.terraform-plan.result == 'success' &&
      (needs.create-model.result == 'success' || needs.create-model.result == 'skipped')
    environment:
      name: prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
          role-session-name: ${{ github.actor }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Setup Terraform
        id: setup-terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.6.1
      - name: Terraform Init
        id: init
        run: |
          cd terraform
          terraform init
      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          terraform apply -auto-approve
        env:
          TF_VAR_allowed_cidrs_string: ${{ secrets.allowed_cidrs }}
          TF_VAR_ssh_public_key: ${{ secrets.bastion_ssh_public_key }}
  # ci_preparation:
  #   needs: [terraform-apply-main, terraform-apply-dev, create-model]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         role-to-assume: ${{ secrets.CICD_ASSUME_ROLE_ARN }}
  #         role-session-name: ${{ github.actor }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - name: Retrieve Model Cache Key
  #       uses: actions/cache@v3
  #       with:
  #         path: models
  #         key: ${{ needs.create-model.outputs.model_cache_key }}
  #     - name: Push Model to S3
  #       run: |
  #         aws s3 cp models/ s3://alexau-pyconhk2023-models/ --recursive
  #     - name: Push Data to S3
  #       run: |
  #         aws s3 cp data/ s3://alexau-pyconhk2023-data/ --recursive
